<?xml version="1.0" encoding="utf-8"?>
<launch>
	<arg name="veh" default="$(env VEHICLE_NAME)" doc="Name of vehicle. ex: megaman"/>
    <arg name="local" default="false" doc="true for running on laptop. false for running on vehicle."/>
    <arg name="config" default="baseline" doc="Specify a config."/>
    <arg name="param_file_name" default="default"/>
    <arg name="line_detector_param_file_name" default="$(arg param_file_name)"/>
    <arg name="fsm_file_name" default="default" />
    <arg name="visualization" default="false" />
	<arg name="verbose" default="false" />
	
	<!-- start switch args -->
    <arg name="anti_instagram" default="true"/>

	<arg name="camera" default="true"/>
	<arg name="/camera/raw" default="true"/>
	<arg name="/camera/cam_info" default="true"/>
	<arg name="/camera/raw/rect" default="true"/>
	<arg name="/camera/local" default="false" />

	<arg name="wheels" default="true"/>

	<arg name="joystick" default="true"/>

	<arg name="odometry" default="false"/>
	<arg name="/odometry/forward_kinematics" default="false"/>

	<arg name="lane_following" default="true"/>
	<arg name="/lane_following/line_detection" default="true"/>
	<arg name="/lane_following/ground_projection" default="true"/>
	<arg name="/lane_following/lane_filter" default="true"/>
	<arg name="/lane_following/stop_line_filter" default="true"/>
	<arg name="/lane_following/lane_controller" default="true"/>

	<arg name="fsm" default="true"/>
	<arg name="planner" default="true"/>
    <arg name="apriltag" default="true"/>

	<!-- Start finite state machine -->
    <group if="$(arg fsm)">    
        <node ns="$(arg veh)" pkg="task_fsm" type="fsm_node.py" name="fsm_node" clear_params="true" output="screen" required="true">
            <rosparam command="load" file="$(find task_fsm)/config/$(arg param_file_name).yaml"/>
        </node>
    </group>

    <group if="$(arg planner)"> 
        <node ns="$(arg veh)" name="task_planner_node" pkg="task_planner" type="task_planner_node.py" output="screen">
            <rosparam command="load" file="$(find task_planner)/config/$(arg param_file_name).yaml"/>
            <remap from="task_planner_node/confirm_path" to="path_planner_node/confirm"/>
            <remap from="task_planner_node/confirm_move" to="move_planner_node/confirm"/>
            <remap from="task_planner_node/finish_move" to="move_planner_node/finish"/>
            <remap from="task_planner_node/finish_path" to="path_planner_node/reach_dest"/>
            <remap from="task_planner_node/finish_coord" to="apriltag_node/coord"/>
        </node>

        <node ns="$(arg veh)" pkg="path_planner" type="path_planner_node.py" name="path_planner_node" output="screen">
            <remap from="path_planner_node/reach_goal" to="stop_line_filter_node/at_stop_line"/>
            <remap from="path_planner_node/set_path" to="task_planner_node/set_path"/>
        </node>

        <node ns="$(arg veh)" pkg="move_planner" type="move_planner_node.py" name="move_planner_node" output="screen">
            <remap from="move_planner_node/set_move" to="task_planner_node/set_move"/>
        </node>
    </group>

	<!-- Start Camera -->  
	<group if="$(arg camera)">
		<include  file="$(find pi_camera)/launch/camera_node.launch">
			<arg name="veh" value="$(arg veh)"/>
			<arg name="config" value="$(arg config)"/>
			<arg name="param_file_name" value="$(arg param_file_name)"/>
		</include>

		<!-- cam_info_reader_node -->
		<group if="$(arg /camera/cam_info)">
			<remap from="cam_info_reader_node/camera_info" to="camera_node/camera_info"/>
			<remap from="cam_info_reader_node/compressed_image" to="camera_node/image/compressed"/>
			<include file="$(find pi_camera)/launch/cam_info_reader_node.launch">
				<arg name="veh" value="$(arg veh)"/>
				<arg name="config" value="$(arg config)"/>
				<arg name="param_file_name" value="$(arg param_file_name)"/>
			</include>
		</group>


		<group if="$(arg /camera/raw)">

			<!-- decoder_node -->
			<remap from="decoder_node/compressed_image" to="camera_node/image/compressed"/>
			<remap from="decoder_node/image/raw" to="camera_node/image/raw"/>
			<include file="$(find pi_camera)/launch/decoder_node.launch">
				<arg name="veh" value="$(arg veh)"/>
				<arg name="config" value="$(arg config)"/>
				<arg name="param_file_name" value="$(arg param_file_name)"/>
				<arg name="local" value="$(arg /camera/local)" />
			</include>

			<!-- Raw camera_info_reader node -->
			<remap from="raw_cam_info_reader_node/camera_info" to="camera_node/raw_camera_info"/>
			<remap from="raw_cam_info_reader_node/compressed_image" to="camera_node/image/raw"/>
			<include file="$(find pi_camera)/launch/cam_info_reader_node.launch">
				<arg name="veh" value="$(arg veh)"/>
				<arg name="local" value="$(arg /camera/local)" />
				<arg name="config" value="$(arg config)"/>
				<arg name="param_file_name" value="$(arg param_file_name)"/>
				<arg name="node_name" value="raw_cam_info_reader_node" />
				<arg name="image_type" value="raw" />
			</include>

			<group if="$(arg /camera/raw/rect)">
				<!-- Rectification -->
				<remap from="image_raw" to="camera_node/image/raw"/>
				<remap from="camera_info" to="camera_node/raw_camera_info"/>
				<remap from="image_rect_color" to="camera_node/image/rect" />
				<include file="$(find pi_camera)/launch/image_proc_node.launch">
					<arg name="veh" value="$(arg veh)"/>
					<arg name="local" value="$(arg /camera/local)" />
				</include>
			</group>
		</group>
	</group>
	<!-- End Camera -->

	<!-- Start Wheels -->
	<group if="$(arg wheels)">

	    <remap from="inverse_kinematics_node/wheels_cmd" to="wheels_driver_node/wheels_cmd" />
		<remap from="inverse_kinematics_node/car_cmd" to="car_cmd_switch_node/cmd"/>
		<include file="$(find dagu_car)/launch/inverse_kinematics_node.launch">
			<arg name="veh" value="$(arg veh)"/>
		</include>

		<!-- Wheel Driver -->
		<include file="$(find dagu_car)/launch/wheels_driver_node.launch">
			<arg name="veh" value="$(arg veh)"/>
		</include>

	 
	</group>

	<!-- End Wheels -->

    <!-- Start FSM -->
	<group if="$(arg fsm)">
		<!-- FSM -->
		<!-- no remapping for FSM - full topic names specified in params yaml -->
		<!--
		<include file="$(find fsm)/launch/fsm_node.launch">
			<arg name="veh" value="$(arg veh)"/>        
			<arg name="config" value="$(arg config)"/>        
			<arg name="param_file_name" value="$(arg fsm_file_name)"/>        
		</include>
		-->

		<!-- car_cmd_switch_node -->
		<!-- no remappings for car_cmd_switch - full topic names specified in params yaml -->
		<remap from="car_cmd_switch_node/cmd_lane_following" to="lane_controller_node/lane_control"/> 
		<!-- need either lots more of these or none of these -->
		<include file="$(find dagu_car)/launch/car_cmd_switch_node.launch">
			<arg name="veh" value="$(arg veh)"/>
			<arg name="config" value="$(arg config)"/>
			<arg name="param_file_name" value="$(arg param_file_name)"/>
		</include>

		<include file="$(find fsm)/launch/logic_gate_node.launch">
			<arg name="veh" value="$(arg veh)"/>
			<arg name="config" value="$(arg config)"/>
			<arg name="param_file_name" value="$(arg param_file_name)"/>
		</include>
	</group>

	<!--End FSM -->

	<!-- Start Joystick -->
	<group if="$(arg joystick)">
		<!-- joy -->
		<include file="$(find joy_mapper)/launch/joy_node.launch">
			<arg name="veh" value="$(arg veh)"/>
			<arg name="config" value="$(arg config)"/>
			<arg name="param_file_name" value="$(arg param_file_name)"/>
		</include>

		<!-- joy_mapper -->
		<include file="$(find joy_mapper)/launch/joy_mapper_node.launch">
			<arg name="veh" value="$(arg veh)"/>
			<arg name="config" value="$(arg config)"/>
			<arg name="param_file_name" value="$(arg param_file_name)"/>
		</include>
	</group>
	<!-- End Joystick -->

	<!-- Start Lane Following -->
	<group if="$(arg lane_following)">

		<!-- Line Detector -->
		<group if="$(arg /lane_following/line_detection)">
			<remap from="line_detector_node/image" to="camera_node/image/compressed"/>
			<remap from="line_detector_node/transform" to="anti_instagram_node/transform"/>
			<include file="$(find line_detector)/launch/line_detector_node.launch">
				<arg name="veh" value="$(arg veh)"/>
				<arg name="config" value="$(arg config)"/>
				<!-- NOTE: "line_detector_param_file_name" as special case -->
				<arg name="param_file_name" value="$(arg line_detector_param_file_name)"/>
				<arg name="verbose" value="$(arg verbose)" />
			</include>	
		</group>
		
		<!-- Ground projection -->
		<group if="$(arg /lane_following/ground_projection)">
			<include file="$(find ground_projection)/launch/ground_projection.launch">
				<arg name="veh" value="$(arg veh)"/>
				<arg name="config" value="$(arg config)"/>
				<arg name="param_file_name" value="$(arg param_file_name)"/>
			</include>
			<group if="$(arg visualization)">
			  <remap from="duckiebot_visualizer/segment_list" to="ground_projection/lineseglist_out"/>
			  <include file="$(find duckiebot_visualizer)/launch/duckiebot_visualizer.launch">
			    <arg name="veh" value="$(arg veh)" />
			  </include>
			</group>
		</group>
	
		<!-- Lane Filter -->
		<group if="$(arg /lane_following/lane_filter)">
		  <remap from="lane_filter_node/segment_list" to="ground_projection/lineseglist_out"/>
		  <remap from="lane_filter_node/car_cmd" to="car_cmd_switch_node/cmd"/>
			<include file="$(find lane_filter)/launch/lane_filter_node.launch">
				<arg name="veh" value="$(arg veh)"/>
				<arg name="config" value="$(arg config)"/>
				<arg name="param_file_name" value="$(arg param_file_name)"/>
			</include>
		</group>

		<!-- Stop Line Filter -->
		<group if="$(arg /lane_following/stop_line_filter)">      
			<remap from="stop_line_filter_node/lanewidth" to="lane_filter_node/lanewidth"/>
			<remap from="stop_line_filter_node/lane_pose" to="lane_filter_node/lane_pose"/>
			<remap from="stop_line_filter_node/segment_list" to="ground_projection/lineseglist_out"/>
			<include file="$(find stop_line_filter)/launch/stop_line_filter_node.launch">
				<arg name="veh" value="$(arg veh)"/>
				<arg name="config" value="$(arg config)"/>
				<arg name="param_file_name" value="$(arg param_file_name)"/>
			</include>
		</group>

		<!-- Lane controller -->
		<group if="$(arg /lane_following/lane_controller)">
			<remap from="lane_controller_node/lane_pose" to="lane_filter_node/lane_pose"/>
			<remap from="lane_controller_node/speed" to="path_planner_node/goal"/>
			<include file="$(find lane_control)/launch/lane_controller_node.launch">
				<arg name="veh" value="$(arg veh)"/>
				<arg name="config" value="$(arg config)"/>
				<arg name="param_file_name" value="$(arg param_file_name)"/>        
			</include>
		</group>

		<!-- Visualization -->
		<group if="$(arg visualization)">
			<include file="$(find lane_filter)/launch/lane_pose_visualizer_node.launch">
				<arg name="veh" value="$(arg veh)"/>		
			</include>
		</group>

	</group>
	<!-- End Lane Control -->
    <!-- Start anti-instagram -->
	<group if="$(arg anti_instagram)">
	  <!-- NOT LOADING PARAMS FROM A YAML FILE -->
      <remap from="anti_instagram_node/uncorrected_image" to="camera_node/image/compressed" />
      <include file="$(find anti_instagram)/launch/anti_instagram_node.launch">
			<arg name="veh" value="$(arg veh)"/>
      </include>
    </group>
	<!-- End anti-instagram -->

    <!-- Start Apriltag-->
    <group if="$(arg apriltag)">
    <node ns="$(arg veh)" pkg="apriltags_ros" type="apriltag_detector_node" name="apriltag_detector" output="screen">
    <!-- Remap topic required by the node to custom topics -->
    <remap from="image_rect" to="camera_node/image/rect" />
    <remap from="camera_node/image/camera_info" to="camera_node/raw_camera_info" />
    <remap from="apriltags_detector_node/image_raw" to="camera_node/image/rect"/>
	<remap from="apriltags_detector_node/camera_info" to="camera_node/raw_camera_info"/>
    <remap from="switch" to="apriltag_detector/switch"/>

    <!-- Optional: Subscribe to the compressed stream-->
    <!--<param name="image_transport" type="str" value="compressed" />-->

    <!-- Select the tag family: 16h5, 25h7, 25h9, 36h9, or 36h11(default) -->
    <param name="tag_family" type="str" value="36h11" />

    <!-- Enable projected optical measurements for more accurate tag transformations -->
    <!-- This exists for backwards compatability and should be left true for new setups -->
    <param name="projected_optics" type="bool" value="true" />

    <!-- Describe the tags -->
    <rosparam param="tag_descriptions">[
      {id: 0, size: 0.163513},
      {id: 1, size: 0.163513, frame_id: a_frame},
      {id: 2, size: 0.163513, frame_id: tag_2},
      {id: 3, size: 0.163513},
      {id: 4, size: 0.163513},
      {id: 5, size: 0.163513}]
    </rosparam>
  </node>
  <node ns="$(arg veh)" name="apriltag_node" pkg="apriltag_coord" type="apriltag_node.py" output="screen">
    <remap from="~apriltags_in" to="tag_detections"/>
  </node>
    </group>
</launch>
